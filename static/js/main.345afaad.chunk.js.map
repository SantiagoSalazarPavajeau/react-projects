{"version":3,"sources":["reducers/projects.js","reducers/index.js","reducers/tasks.js","reducers/people.js","components/NavBar.js","components/Sidebar.js","actions/projectActions.js","actions/tasksActions.js","components/projects/CloseModal.js","components/projects/TitleInput.js","components/projects/DescriptionInput.js","components/projects/ProjectInput.js","components/tasks/Task.js","components/tasks/TasksModal.js","components/projects/ProjectCard.js","containers/Projects.js","containers/Tasks.js","components/people/Person.js","containers/People.js","actions/peopleActions.js","components/people/Signup.js","components/people/Login.js","components/people/Profile.js","App.js","serviceWorker.js","index.js"],"names":["cuid","combineReducers","projects","state","action","type","project","title","newProject","started","description","id","filter","projectIndex","findIndex","slice","data","map","attributes","concat","tasks","console","log","task","newTask","taskIndex","people","person","username","newPerson","image","deletedPerson","NavBar","props","className","currentUser","token","to","onClick","e","handleLogout","SideBar","aria-hidden","editProject","configObj","method","headers","body","JSON","stringify","dispatch","fetch","then","response","json","editedProject","addTask","project_id","person_id","completed","deleteTask","editTask","parseInt","editedTask","CloseModal","Form","Button","closeModal","TitleInput","Input","onChange","event","handleOnChange","value","name","placeholder","DescriptionInput","TextArea","ProjectInput","showModal","setState","target","handleOnSubmit","preventDefault","saveProject","openModal","renderForm","Modal","dimmer","open","Header","Content","Image","wrapped","size","alt","src","Description","this","Component","Task","makeCompleted","makeInProgress","handleSave","handleDelete","assignTo","ownerIndex","innerText","renderInProgress","dropdownFormat","push","key","text","avatar","owner","find","labelPosition","rows","cols","icon","Dropdown","button","floating","labeled","options","renderCompleted","Label","color","Detail","TasksModal","edit","loading","setPercent","projectTasks","percent","numberCompleted","numberInProgress","i","length","startEdit","cancelEdit","saveEdit","renderEdit","onSubmit","renderDescription","Grid","columns","Row","Column","basic","secondary","content","handleHideTasksModal","renderTasks","handleAddTask","renderModal","scrolling","width","status","Divider","horizontal","withRouter","ProjectCard","showTasksModal","handleDeleteClick","handleCancel","handleConfirm","deleteProject","handleShowTasksModal","Confirm","onCancel","onConfirm","Projects","showFormModal","searchTerm","renderProjects","includes","setSearchState","handleSearchProject","stackable","container","connect","Tasks","toString","match","params","Person","list","Card","header","People","renderPeople","addPerson","loginUser","user","Accept","resp","Signup","password","showSucces","error","handleChange","handleSubmit","createUser","Message","success","Login","auth","handleLogin","history","Profile","handleDeletePerson","deletePerson","localStorage","removeItem","renderProfile","App","fetchProjects","fetchPeople","fetchTasks","getItem","exact","path","render","routerProps","catch","message","Boolean","window","location","hostname","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.345afaad.chunk.js","sourcesContent":["import cuid from 'cuid';\nexport const cuidFn = cuid;\n\n\nexport default function projects(\n    state = []\n    ,\n    action){\n        switch(action.type){\n            case 'ADD_PROJECT':\n                const project = {\n                    title: action.newProject.title,\n                    started: '',\n                    description: action.newProject.description,\n                    id: action.newProject.id\n                }\n                return [...state, project]\n            case 'DELETE_PROJECT':\n                return [...state.filter(project => project.id !== action.id)]\n            case 'EDIT_PROJECT':\n                let projectIndex = state.findIndex(project => project.id === action.project.id) //state is empty if load projects does not include state\n                return [...state.slice(0, projectIndex), action.project, ...state.slice(projectIndex + 1)]\n            case 'LOAD_PROJECTS':\n                // console.log(action.projects.data)\n                let projects = action.projects.data.map(project => project.attributes)\n                // console.log(...state, projects)\n                return [...state.concat(projects)] // this sets state to include the projects. if we only return the projects object, state will be empty on other actions\n            case 'LOADING_PROJECTS':\n                return [...state]\n            default:\n                return state\n        }\n\n}\n\n\n\n\n\n","import { combineReducers } from 'redux'\nimport projects from './projects'\nimport tasks from './tasks'\nimport people from './people'\n\nexport default combineReducers({\n    projects,\n    tasks,\n    people\n})","\n\nexport default function tasks(state = [], action){\n    switch(action.type){\n        case 'ADD_TASK':\n                console.log(action.task)\n                console.log(state)\n                return[...state.concat(action.newTask)]\n            case 'DELETE_TASK':\n                return [...state.filter(task => task.id !== action.id)]\n            case 'EDIT_TASK':\n                let taskIndex = state.findIndex(task => task.id === action.task.id)\n                console.log(action.task)\n                return[...state.slice(0, taskIndex), action.task, ...state.slice(taskIndex + 1)]\n            case 'LOAD_TASKS':\n                const tasks = action.tasks.data.map(task => task.attributes)\n                return [...state.concat(tasks)]\n            default:\n                return state;\n    }\n}\n\n","export default function people(state = [], action){\n    switch(action.type){\n        case 'ADD_PERSON':\n                const person = {\n                        username: action.newPerson.username,\n                        image: action.newPerson.image,\n                        id: action.newPerson.id\n                    }\n                return [...state, person]\n        case 'DELETE_PERSON':\n                console.log(action.id)\n                let deletedPerson;\n                state.map(person => person.id !== action.id ? deletedPerson = person : null)\n                // console.log(deletedPerson)\n                // console.log(state.filter(person => person.username !== deletedPerson.username))\n                return [...state.filter(person => person.username !== deletedPerson.username)]\n        case 'LOAD_PEOPLE':\n                const people = action.people.data.map(person => person.attributes)\n                return [...state.concat(people)]\n        default:\n                return state\n    }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nconst NavBar = (props)=>{\n        return(\n            <div className=\"ui stackable menu\">\n                <div className=\"header item\">\n                    Projects Dashboard\n                </div>\n                    {/* {console.log(props.currentUser)} */}\n                    {props.currentUser.token ? null : <Link to=\"/login\" className=\"ui item\">Login</Link>}\n                    {props.currentUser.token ? null : <Link to=\"/signup\" className=\"ui item\" >Signup</Link>}\n                    {props.currentUser.token ? <Link to=\"/profile\" className=\"ui item\" >Profile</Link> : null }\n                    {props.currentUser.token ? <Link className=\"ui item right\" onClick={e => props.handleLogout(e)}> Logout </Link> : null}\n\n            </div>\n            \n        )\n}\n\nexport default NavBar;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport \"../App.css\";\n\n\n// fix import\nconst SideBar = () => {\n        return(\n        <div className=\"sidebar\">\n            <div className=\"ui left vertical inverted icon visible sidebar menu\">\n                <Link to=\"/\" className=\"item\">\n                        <i aria-hidden=\"true\" className=\"home icon\"></i>\n                        Home\n                </Link>\n                <Link to=\"/projects\" className=\"item\" >\n                        <i aria-hidden=\"true\" className=\"sitemap icon\"></i>\n                        Projects\n                </Link>\n                <Link to=\"/people\" className=\"item\" >\n                        <i aria-hidden=\"true\" className=\"users icon\"></i>\n                        People\n                </Link>\n            </div>\n        </div>\n        )\n}\n\nexport default SideBar;","// const URL ='https://secure-shelf-48338.herokuapp.com/'\nconst URL ='http://localhost:3001'\n\nexport function fetchProjects(){\n    return (dispatch) => {\n        dispatch({type: 'LOADING_PROJECTS'})\n            fetch(`${URL}/projects`)\n                .then(response => {return response.json()})\n                .then(projects => {\n                    // console.log(projects)\n                    dispatch({type: 'LOAD_PROJECTS', projects}) // Have to access the data structure from the rails API correctly\n                })\n                .catch(error => console.log(error.message))\n    }\n}\n\nexport function saveProject(project){\n    const configObj = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n            title: project.title,\n            description: project.description\n        })\n      };\n    return (dispatch) => {\n        fetch(`${URL}/projects`, configObj)\n            .then(response => {return response.json()})\n            .then(project => {\n                // console.log(project)\n                const newProject = project.data.attributes // async response from server adds project\n                dispatch({type: 'ADD_PROJECT', newProject}) // a project can have data that references tasks and tasks have data that references people\n            })\n    }\n}\n\nexport function deleteProject(id){\n    const configObj = {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        }\n      };\n    return (dispatch) => {\n        fetch(`${URL}/projects/${id}`, configObj)\n            .then(response => {return response.json()})\n            .then(() => {\n                dispatch({type: 'DELETE_PROJECT', id}) // a project can have data that references tasks and tasks have data that references people\n            })\n    }\n}\n\nexport function editProject(project){\n    const configObj = {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n            title: project.title,\n            description: project.description\n        })\n      };\n    return (dispatch) => {\n        fetch(`${URL}/projects/${project.id}`, configObj)\n            .then(response => {return response.json()})\n            .then(editedProject => {\n                console.log(editedProject)\n                let project = editedProject.data.attributes\n                dispatch({type: 'EDIT_PROJECT', project}) // a project can have data that references tasks and tasks have data that references people\n            })\n    }\n}","// const URL ='https://secure-shelf-48338.herokuapp.com/'\nconst URL ='http://localhost:3001'\n\nexport function fetchTasks(){\n    return (dispatch) => {\n            fetch(`${URL}/tasks`)\n                .then(response => {return response.json()})\n                .then(tasks => {\n                    // console.log(tasks)\n                    dispatch({type: 'LOAD_TASKS', tasks}) // Have to access the data structure from the rails API correctly\n                })\n                .catch(error => console.log(error.message))\n    }\n}\n\nexport function addTask(project_id){\n    \n    const configObj = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n            description: \"New task...\",\n            project_id: project_id,\n            person_id: 1,  // person_id needed for ActiveRecord to commit task to database\n            completed: false\n        })\n      };\n    console.log('b')\n    return (dispatch) => {\n        console.log('c')\n        fetch(`${URL}/tasks`, configObj)\n            .then(response => {return response.json()})\n            .then(task => {\n                // console.log(project)\n                console.log('d')\n                const newTask = task.data.attributes \n                console.log(task)\n                dispatch({type: 'ADD_TASK', newTask}) \n            })\n        console.log('e')\n    }\n}\n\nexport function deleteTask(id){\n    const configObj = {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        }\n      };\n    return (dispatch) => {\n        fetch(`${URL}/tasks/${id}`, configObj)\n            .then(response => {return response.json()})\n            .then(() => {\n                dispatch({type: 'DELETE_TASK', id})\n            })\n    }\n}\n\nexport function editTask(task){\n    const configObj = {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n            description: task.description,\n            person_id: parseInt(task.person_id),\n            project_id: task.project_id,\n            completed: task.completed\n        })\n      };\n    return (dispatch) => {\n        fetch(`${URL}/tasks/${task.id}`, configObj)\n            .then(response => {return response.json()})\n            .then(editedTask => {\n                console.log(editedTask)\n                let task = editedTask.data.attributes\n                dispatch({type: 'EDIT_TASK', task}) // a task can have data that references tasks and tasks have data that references people\n            })\n    }\n}","import React from 'react';\n// import ProjectCard from './ProjectCard';\nimport { Form } from 'semantic-ui-react'\n\nconst CloseModal = (props) => { \n        return(\n            <Form.Button onClick={props.closeModal} type=\"submit\" >Cancel</Form.Button>\n        )\n}\n\nexport default CloseModal;","import React from 'react';\n// import ProjectCard from './ProjectCard';\nimport { Form } from 'semantic-ui-react'\n\nconst TitleInput = (props) => {\n        return(\n            <Form.Input type=\"text\" onChange={event => props.handleOnChange(event)} value={props.title} name=\"title\" placeholder={props.title}/>\n        )\n}\n\nexport default TitleInput","import React from 'react';\n// import ProjectCard from './ProjectCard';\nimport { Form } from 'semantic-ui-react'\n\nconst DescriptionInput = (props) => {\n        return(\n            <Form.TextArea type=\"text\" onChange={event => props.handleOnChange(event)} value={props.description} name=\"description\" placeholder={props.description}/>\n        )\n}\n\nexport default DescriptionInput;","import React, {Component} from 'react';\n// import ProjectCard from './ProjectCard';\nimport { Button, Header, Image, Modal, Form } from 'semantic-ui-react'\nimport CloseModal from './CloseModal';\nimport TitleInput from './TitleInput';\nimport DescriptionInput from './DescriptionInput'\n\n\n\nexport default class ProjectInput extends Component{\n    state = {\n        title: '',\n        description: '',\n        showModal: false\n    }\n\n    handleOnChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    handleOnSubmit = (event) => {\n        event.preventDefault()\n        this.props.saveProject(this.state)\n        this.setState({\n            title: '',\n            description: '',\n            showModal: false\n        })\n    }\n\n    openModal = () => {\n        this.setState({\n            showModal: true\n        })\n    }\n\n    closeModal = () => {\n        this.setState({\n            showModal: false\n        })\n    }\n\n\n\n    renderForm = () => {\n        return (\n            <>\n            <Button onClick={this.openModal}> <i className=\"add icon center\"></i></Button>\n            <Modal dimmer={\"inverted\"} open={this.state.showModal} >\n                <Modal.Header>Add a project</Modal.Header>\n                    <Modal.Content image>\n                    <Image wrapped size='medium' alt=\"Workbench and tools\" src='https://images.unsplash.com/photo-1416339158484-9637228cc908?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1934&q=80' />\n                    <Modal.Description>\n                        {/* <ProjectForm handleOnChange={this.handleOnChange} closeModal={this.closeModal} handleOnSubmit={this.handleOnSubmit} title={this.state.title} description={this.state.description}/> */}\n                        <Form>\n                        <Header>Title:</Header>\n                                {/* <Form.Input type=\"text\" onChange={event => this.handleOnChange(event)} value={this.state.title} name=\"title\" placeholder={this.state.title}/> */}\n                                <TitleInput handleOnChange={this.handleOnChange} title={this.state.title}/>\n                        <Header>Description:</Header>\n                                <DescriptionInput handleOnChange={this.handleOnChange} description={this.state.description}/>\n\n                                {/* <Form.TextArea type=\"textarea\" onChange={event => this.handleOnChange(event)} value={this.state.description} name=\"description\" placeholder={this.state.description}/> */}\n                                {/* <Form.Button onClick={this.closeModal} type=\"submit\" >Cancel</Form.Button> */}\n                                <Form.Button onClick={(event) => this.handleOnSubmit(event)} type=\"submit\" >Submit</Form.Button>\n                                <CloseModal closeModal={this.closeModal}/>\n                        </Form>\n                        \n                    </Modal.Description>\n                </Modal.Content>\n            </Modal>\n\n\n            </>\n        )\n    }\n    render(){\n        return(\n            <>\n            {/* {this.state.showForm ? this.renderForm() : <Button onClick={this.showForm}> Add project </Button>}   */}\n            {this.renderForm()}\n            </>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Input, Dropdown, Label, TextArea, Button, Form } from 'semantic-ui-react';\n\n\nclass Task extends Component{\n\n    state = {\n        description: this.props.description,\n        id: this.props.id,\n        person_id: this.props.person_id,\n        completed: this.props.completed,\n        project_id: this.props.project_id\n    }\n\n    makeCompleted = () => {\n        this.setState({\n            completed: true\n        })\n    }\n\n    makeInProgress = () => {\n        this.setState({\n            completed: false\n        })\n    }\n\n    handleSave = () => {\n        console.log(this.state.person_id)\n        this.props.editTask(this.state)\n    }\n\n    handleDelete = () => {\n        this.props.deleteTask(this.props.id)\n    }\n\n    assignTo = (e) => {\n        const ownerIndex = this.props.people.findIndex(person => person.username === e.target.innerText)\n        this.setState({\n            person_id: this.props.people[ownerIndex].id // use onchange for dropdowns/select and parentNode.id instead of value\n        })\n    }\n    \n    renderInProgress = () => {\n        let dropdownFormat = []\n        this.props.people.map(person => dropdownFormat.push({key: person.username, text: person.username, value: person.username, image: { avatar: true, src: person.image } }))\n        let owner = dropdownFormat.find(person => person.id === this.state.person_id) // person_id is a propery of the task and we can find the owner in the people state\n        return (\n            \n            <>\n            <br></br>\n\n            {/* {console.log(owner)}\n            {console.log(this.props.people)}\n            {console.log(this.state.person_id)} */}\n                <Input  size=\"small\" labelPosition='right' type='text' value={this.state.description} placeholder={this.state.description}>\n\n                <TextArea onChange={event => this.setState({description: event.target.value})} value={this.state.description} rows=\"4\" cols=\"70\"/>\n                <Button onClick={this.handleSave} icon=\"save\"></Button>\n                <Button onClick={this.makeCompleted} icon=\"check circle\"></Button>\n                <Button onClick={this.handleDelete} icon=\"trash\"></Button>\n\n                </Input>\n            <br></br>\n\n                Assigned to: <Dropdown button className='icon' placeholder={owner ? owner.key : 'Yet to be assigned'} onChange={e => this.assignTo(e)} floating labeled icon='users' options={dropdownFormat} />\n            <br></br>\n\n            <br></br>\n            <br></br>\n            <br></br>\n            </>\n\n        )\n    }\n    \n    renderCompleted = () => {\n        let owner = this.props.people.find(person => person.id === this.state.person_id)\n        return (\n            <>\n            <br></br>\n            <Label color='green' image>\n            <img alt=\"Profile Pic\" src='https://api.adorable.io/avatars/77/stevie@adorable.io.png' />\n                completed by {owner ? owner.key : 'Yet to be assigned'}\n            <Label.Detail>{this.props.description}</Label.Detail>\n\n            </Label>\n            <Button onClick={this.handleSave} icon=\"save\"></Button>\n            <Button onClick={this.makeInProgress} icon=\"redo\"></Button>   \n            <Button onClick={this.handleDelete} icon=\"trash\"></Button>\n\n            <br></br>\n            </>\n        )     \n     }\n    \n    render(){\n        return (\n            <>\n            <Form> \n            {this.state.completed ? this.renderCompleted() : this.renderInProgress()}\n            </Form>\n            {/* {console.log(this.state)} */}\n            </>\n        )\n    }\n}\n\nexport default Task\n\n\n","import React, {Component} from 'react';\nimport { Header, Image, Modal, Form, Button, Divider, Grid } from 'semantic-ui-react'\nimport {withRouter} from 'react-router-dom';\nimport Task from './Task'\n\nimport { Progress } from 'react-sweet-progress';\nimport \"react-sweet-progress/lib/style.css\";\n\n\nclass TasksModal extends Component{\n    state = {\n        title: this.props.project.title,\n        started: this.props.project.started,\n        description: this.props.project.description,\n        id: this.props.project.id,\n        edit: false,\n        loading: false\n    }\n    \n    setPercent = () => {\n        const projectTasks = this.props.tasks.filter(task => task.project_id === this.state.id)\n        let percent =  0\n        let numberCompleted = 0\n        let numberInProgress = 0\n        for(let i=0; i<projectTasks.length;i++){\n            if(projectTasks[i].completed === true){\n                numberCompleted++\n                console.log(numberCompleted)\n            }else{\n                numberInProgress++\n                // console.log(numberInProgress)\n            }\n            percent = numberCompleted / (numberInProgress + numberCompleted)\n        }\n        // console.log(percent)\n        this.setState({\n            percent: percent * 100\n        })\n    }\n\n    componentDidMount(){\n        this.setPercent()\n    }\n    \n    startEdit = () => {\n        this.setState({\n            edit: true\n        })\n    }\n\n    cancelEdit = () => {\n        this.setState({\n            edit: false\n        })\n    }\n\n    saveEdit = (event) => {\n        event.preventDefault()\n        this.props.editProject({\n            title: this.state.title,\n            started: this.props.project.started,\n            id: this.props.project.id,\n            description: this.state.description\n        })\n        this.setState({\n            edit: false\n        })\n        // console.log(this.props.projects)\n    }\n\n    handleOnChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    renderEdit = (project) => {\n        return (\n            <Modal.Description>\n                <Form onSubmit={(event) => this.saveEdit(event)}>\n                    <Form.Input type=\"text\" onChange={event => this.handleOnChange(event)} value={this.state.title} name=\"title\" />\n                    <Form.TextArea type=\"textarea\" onChange={event => this.handleOnChange(event)} value={this.state.description} name=\"description\" />\n                    <Button icon=\"save\" type=\"submit\" ></Button>\n                    <Button icon=\"close\" onClick={this.cancelEdit}></Button>\n                </Form>\n            </Modal.Description>\n        )\n    }\n    renderDescription = (project) => {\n        return (\n            <>\n                <Grid columns={3}>\n                <Grid.Row>\n                    <Grid.Column>\n                    <Button basic secondary content=\"Edit Project\" labelPosition='right' icon=\"pencil\" onClick={e => this.startEdit(e)} ></Button>                               \n                    </Grid.Column>\n                    <Grid.Column>\n                    </Grid.Column>\n                    <Grid.Column>\n                    <Button basic content=\"Exit Project Page\"  onClick={ e => this.props.handleHideTasksModal(e)} secondary ></Button>\n                    </Grid.Column>\n                    </Grid.Row>\n                </Grid> \n                <Header>{project.title}</Header>\n                <p>{project.description}</p>\n\n                      \n            </>          \n        )\n    }\n\n    renderTasks = () => {// filter tasks for this project only\n        // console.log(this.props.tasks)\n        const projectTasks = this.props.tasks.filter(task => task.project_id === this.state.id)\n        return projectTasks.map(task => <Task key={task.id} people={this.props.people} person_id={task.person_id} deleteTask={this.props.deleteTask} project_id={this.state.id} editTask={this.props.editTask} id={task.id} description={task.description} completed={task.completed}/>)\n    }\n\n    handleAddTask = () => {\n        console.log('a')\n        this.props.addTask(this.state.id)\n        console.log('g')\n        console.log(this.state.id)\n    }\n\n    renderModal = () => {\n        // console.log(this.props)\n        if(!this.props.loading){\n            const project = this.props.project\n            return(\n                <>\n                    <div className=\"ui grid container\">\n                        <div className=\"eight wide column\" >\n                            <Modal size={\"large\"} dimmer={\"inverted\"} open={true} >\n                                <Modal.Header></Modal.Header>\n                                    <Modal.Content image scrolling>\n                                    <Image size='medium' alt=\"Workbench and tools\" src='https://images.unsplash.com/photo-1416339158484-9637228cc908?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1934&q=80' wrapped/>\n                                    <Modal.Description>\n                                    {this.state.edit ?  this.renderEdit(project) : this.renderDescription(project)}\n                                    {/* {this.setPercent()} */}\n                                    <Progress type=\"circle\" width={30} percent={this.state.percent} status=\"success\" />\n                                    <Divider horizontal>Tasks</Divider>\n                                    <Button basic secondary onClick={this.handleAddTask}>Add Task</Button>\n                                    <br></br>\n                                    {this.renderTasks()}\n                                    {/* {console.log(this.props.tasks.filter(task => task.projectId === this.state.id))} */}\n                                    {/* {console.log(project)} */}\n\n                                    </Modal.Description>\n                                </Modal.Content>\n\n\n                            </Modal>\n                        </div>\n                    </div>\n                \n            </>\n            )\n        }else{\n            return (\n                <>\n                    <div className=\"ui grid container\">\n                        <div className=\"eight wide column\" >\n                            <Modal size={\"large\"}dimmer={\"inverted\"} open={true} >\n                               <p>Loading</p> \n\n\n                            </Modal>\n                        </div>\n                    </div>\n                </>\n                \n            )\n        }\n    }\n\n    render(){\n        return( \n            <>\n            {this.renderModal()}\n            </>\n        )\n    }\n    \n  }\n\nexport default withRouter(TasksModal)","import React, {Component} from 'react';\nimport { Button, Confirm } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom';\nimport TasksModal from '../tasks/TasksModal';\n\n\n\n// modal is to display tasks\n\nexport default class ProjectCard extends Component{\n    state = {\n      open: false,\n      edit: false,\n      percent: 50,\n      showTasksModal: false\n    }\n\n    handleDeleteClick = (event) => {\n      this.setState({\n        open: true\n      })\n    }\n\n    handleCancel = () => {\n      this.setState({\n        open: false\n      })\n    }\n\n    handleConfirm = () => {\n      this.props.deleteProject(this.props.id)\n      this.setState({\n        open: false\n      })\n    }\n\n    setPercent = () =>{\n      console.log(this.props)\n      // const projectTasks = this.props.tasks.filter(task => task.project_id === this.state.id)\n      let percent = 0\n      this.setState({\n        percent: percent\n      })\n    }\n\n    handleShowTasksModal = () => {\n      this.setState({\n        showTasksModal: true\n      })\n    }\n\n    handleHideTasksModal = () => {\n      this.setState({\n        showTasksModal: false\n      })\n    }\n\n\n\n    render(){\n      // const project = this.props.projects.find(project => project.id.toString() === this.props.id)\n      // console.log(this.props.project)\n      // add event listener to exit button on tasks modal to set showTasksModal to false again\n        return(\n          <>\n            \n            {this.state.showTasksModal ? <TasksModal handleHideTasksModal={this.handleHideTasksModal} project={this.props.project} tasks={this.props.tasks} people={this.props.people} editProject={this.props.editProject} addTask={this.props.addTask} deleteTask={this.props.deleteTask} editTask={this.props.editTask}/> : null}\n            <div className=\"eight wide column\" >\n            <div className=\"ui card\">\n              <div className=\"image\">\n              </div>\n              <div className=\"content\">\n                  {/* <input value={this.props.title}/> */}\n                      {/* <Link className=\"header\" to={`/project-${this.props.id}`}>{this.props.title}</Link>  */}\n                      {/* make this link set show tasks modal to true. gotta change link to event listener and it has to go to task modal */}\n                      {/* move tasks modal code to here */}\n                      <Link className=\"header\" onClick={e => this.handleShowTasksModal(e)}>{this.props.title}</Link>\n                      <div className=\"meta\">\n                    <span className=\"date\">{this.props.started}</span>\n                  </div>\n                  <div className=\"description\">\n                    {this.props.description}\n                  </div>\n                  <div className=\"ui right aligned grid\">\n              \n                  <div className=\"sixteen wide column\">\n                                   \n                  </div>\n                  </div>\n              </div>\n              <div className=\"extra content\">\n                <div className=\"left floated right aligned six wide column\">\n                        \n                        <Link className=\"header\" onClick={e => this.handleShowTasksModal(e)}>\n                          <Button basic icon='pencil'/>\n                        </Link> \n                        <Button basic icon='trash' onClick={event => this.handleDeleteClick(event)}>\n                          {/* <i aria-hidden=\"true\" className=\"trash alternate icon right\"></i> */}\n                        </Button>\n                      <Confirm\n                        open={this.state.open}\n                        onCancel={this.handleCancel}\n                        onConfirm={this.handleConfirm}\n                      />\n                  </div>\n                \n              </div>\n            </div>\n            </div>\n          </>\n        )\n    }\n}","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport '../App.css'\nimport {saveProject, deleteProject, editProject} from '../actions/projectActions' //async actions imported from the actions file\nimport { addTask, deleteTask, editTask } from '../actions/tasksActions';\n\nimport { Input, Grid } from 'semantic-ui-react';\n\n\nimport ProjectInput from '../components/projects/ProjectInput';\nimport ProjectCard from '../components/projects/ProjectCard';\n\n\n\n\n// content changes here with router\n// need Many of these\n// will become a container component\n\nclass Projects extends Component{\n\n    state = {\n        showFormModal: false,\n        searchTerm: ''\n    }\n\n    renderProjects = () => {\n        const searchedProjects = this.props.projects.filter(project => project.title.includes(this.state.searchTerm))\n        return searchedProjects.map( project => <ProjectCard key={project.id} project={project} people={this.props.people} tasks={this.props.tasks} title={project.title} started={project.started} description={project.description} id={project.id} editProject={this.props.editProject} deleteProject={this.props.deleteProject} addTask={this.props.addTask} deleteTask={this.props.deleteTask} editTask={this.props.editTask}/> )\n    }\n\n    renderModal = () => {\n        this.setState({\n            showFormModal: true\n        })\n    }\n\n    setSearchState = () => {\n\n    }\n\n    handleSearchProject = (event) => {\n        this.setState({\n            searchTerm: event.target.value\n        })      \n    }\n    \n\n    render(){\n        return(\n            <>\n                    <div className=\"ui grid container\">\n                        <div className=\"eight wide column\" >\n                        <Input className=\"large\"placeholder=\"Search\" onChange={e => this.handleSearchProject(e)}/>\n                            {/* Search input */}<br></br><br></br>\n\n                            <ProjectInput saveProject={this.props.saveProject}/>\n                            {/* {console.log(this.state.searchTerm)}\n                            {console.log(this.state.searchedProjects)} */}\n                            {/* {console.log(this.props.projects.filter(project => project.title.includes(this.state.searchTerm)))} */}\n\n                            {/* search button */}\n                        </div>\n                    </div>\n\n                    <br></br>\n                    <br></br>\n\n                    {/* <div className=\"ui grid container\"> */}\n                    <Grid stackable container columns={2} >\n\n                        {/* <ProjectsList projects={this.props.projects} editProject={this.props.editProject} deleteProject={this.props.deleteProject}/> */}\n                        {this.renderProjects()}\n                        \n                        {/* Ptoject Card can contain Tasks Modal in the code? */}\n                    </Grid>\n\n\n                    {/* </div> */}\n                    <br></br>\n                    <br></br>\n\n\n\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        projects: state.projects,\n        tasks: state.tasks,\n        people: state.people\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        saveProject: (project) => dispatch(saveProject(project)), // this changed from the local redux store to the redux thunk backend connection\n        deleteProject: (id) => dispatch(deleteProject(id)),\n        editProject: project => dispatch(editProject(project)),\n        addTask: project_id => dispatch(addTask(project_id)),\n        deleteTask: id => dispatch(deleteTask(id)),\n        editTask: task => dispatch(editTask(task)),\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Projects);","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport '../App.css'\n\nimport TasksModal from '../components/tasks/TasksModal';\nimport { editProject } from '../actions/projectActions';\nimport { addTask, deleteTask, editTask } from '../actions/tasksActions';\n\n\n\n// nested route for tasks needs to be here\n\nclass Tasks extends Component{\n\n    render(){\n        const project = this.props.projects.find(project => project.id.toString() === this.props.match.params.id)\n        return ( // the match params id is a string not an integer\n            <>\n            <TasksModal project={project} tasks={this.props.tasks} people={this.props.people}  match={this.props.match} editProject={this.props.editProject} addTask={this.props.addTask} deleteTask={this.props.deleteTask} editTask={this.props.editTask}/>\n            {/* {console.log(this.props)} */}\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n        tasks: state.tasks,\n        projects: state.projects,\n        people: state.people\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        addTask: project_id => dispatch(addTask(project_id)),\n        deleteTask: id => dispatch(deleteTask(id)),\n        editTask: task => dispatch(editTask(task)),\n        editProject: project => dispatch(editProject(project)),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps) (Tasks)","import React, {Component} from 'react';\nimport { Card, Grid } from 'semantic-ui-react'\n\n// import Task from '../tasks/Task';\nimport { Link } from 'react-router-dom';\n\n\n\nimport TasksModal from '../tasks/TasksModal';\n\n\n\nexport default class Person extends Component{\n\n    state = {\n        showTasksModal: false\n    }\n\n    renderTasks = () => {\n        const myTasks= this.props.tasks.filter(task => task.person_id === this.props.id) // filter out the tasks that don't belong to the person\n        let project;\n        const list = myTasks.map((task) => {\n                        project = this.props.projects.find(project => project.id === task.project_id )\n                        // console.log(project.title)\n                        // return <li key={task.id}> <Link to={`project-${project.id}`}>{project.title} Project</Link>: {task.description}  {task.completed ? <p>(Completed)</p> : <p>(InProgress)</p>}   </li>\n                        return <li key={task.id}> <Link onClick={this.handleShowTasksModal}>{project.title} Project</Link>: {task.description}  {task.completed ? <p>(Completed)</p> : <p>(InProgress)</p>}   </li>\n                    })\n        return <ul>{list}</ul>\n    }\n\n    handleShowTasksModal = () => {\n        this.setState({\n          showTasksModal: true\n        })\n      }\n  \n    handleHideTasksModal = () => {\n        this.setState({\n          showTasksModal: false\n        })\n      }\n\n    render(){\n        const myTasks= this.props.tasks.filter(task => task.person_id === this.props.id) // filter out the tasks that don't belong to the person\n        let project;\n        myTasks.map((task) => { return project = this.props.projects.find(project => project.id === task.project_id )})\n        return(\n            <>\n            {this.state.showTasksModal ? <TasksModal handleHideTasksModal={this.handleHideTasksModal} project={project} tasks={this.props.tasks} people={this.props.people} editProject={this.props.editProject} addTask={this.props.addTask} deleteTask={this.props.deleteTask} editTask={this.props.editTask}/> : null}\n\n            {/* <div className=\"ui stackable eight wide column\" > */}\n                {/* {console.log(this.props.tasks)}  */}\n                {/* See if we are having access to the store and the tasks */}\n                {/* {console.log(myTasks)} */}\n                    <Grid.Column>\n                        <Card\n                        image={this.props.image}\n                        header={this.props.username}\n                        // meta='Software Engineer'\n                        description={this.renderTasks}\n                        />\n                    </Grid.Column>\n\n            {/* </div> */}\n            </>\n        )\n    }\n}","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\n\nimport Person from '../components/people/Person'\n\nimport { editProject } from '../actions/projectActions' //async actions imported from the actions file\nimport { addTask, deleteTask, editTask } from '../actions/tasksActions';\n\nimport { Grid } from 'semantic-ui-react'\n\n\nclass People extends Component{\n\n\n    renderPeople = () => {\n        return this.props.people.map(person => <Person editProject={this.props.editProject} addTask={this.props.addTask} deleteTask={this.props.deleteTask} editTask={this.props.editTask} people={this.props.people} projects={this.props.projects} key={person.id} id={person.id} username={person.username} image={person.image} tasks={this.props.tasks}></Person>)\n    }\n\n\n\n    render(){\n        return (\n                <>\n                {/* <div className=\"ui grid container\"> */}\n\n                    <Grid stackable container columns={2} >\n                    {this.renderPeople()}\n                    </Grid>\n                                 {/* </div> */}\n\n                </>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        people: state.people,\n        tasks: state.tasks,\n        projects: state.projects\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        addPerson: person => dispatch({type: 'ADD_PERSON', person}),\n        editProject: project => dispatch(editProject(project)),\n        addTask: project_id => dispatch(addTask(project_id)),\n        deleteTask: id => dispatch(deleteTask(id)),\n        editTask: task => dispatch(editTask(task))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(People);","// const URL ='https://secure-shelf-48338.herokuapp.com/'\nconst URL ='http://localhost:3001'\n\nexport function fetchPeople(){\n    return (dispatch) => {\n            fetch(`${URL}/people`)\n                .then(response => {return response.json()})\n                .then(people => {\n                    // console.log(projects)\n                    dispatch({type: 'LOAD_PEOPLE', people}) // Have to access the data structure from the rails API correctly\n                })\n                .catch(error => console.log(error.message))\n    }\n}\n\nexport const createUser = user => {\n    return dispatch => {\n      return fetch(`${URL}/people`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        body: JSON.stringify({user})\n      })\n        .then(resp => resp.json())\n        .then((person) => {\n          const newPerson = person.data.attributes\n          dispatch({type: \"ADD_PERSON\", newPerson})\n        })\n\n    }\n  }\n\n  export const loginUser = user => {\n    return dispatch => {\n      return fetch(`${URL}/auth`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        body: JSON.stringify({user})\n      })\n        .then(resp => resp.json())\n        // .then(data => {\n        //   console.log(data)\n        //   if (data.message) {\n        //     console.log(data.message)\n        //     // Here you should have logic to handle invalid creation of a user.\n        //     // This assumes your Rails API will return a JSON object with a key of\n        //     // 'message' if there is an error with creating the user, i.e. invalid username\n        //   } else {\n        //     // localStorage.setItem(\"token\", data.token)\n        //     // dispatch({type: 'LOGIN_USER', userObj: data.payload})\n        //   }\n        // })\n    }\n  }\n\n  export function deletePerson(id){\n    const configObj = {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        }\n      };\n    return (dispatch) => {\n        fetch(`${URL}/people/${id}`, configObj)\n            .then(response => {return response.json()})\n            .then(() => {\n                dispatch({type: 'DELETE_PERSON', id})\n            })\n    }\n}","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport { Form, Grid, Message } from 'semantic-ui-react';\nimport {createUser} from '../../actions/peopleActions';\n\nclass Signup extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    showSucces: false,\n    error: false\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n    return this.props.createUser({username: this.state.username, password: this.state.password}) ? this.setState({showSucces: true}) : this.setState({error: true}) \n  }\n\n  renderForm = () => {\n    if (!this.state.showSucces){\n      return (<Form onSubmit={this.handleSubmit}>\n                    <h1>Sign Up For An Account</h1>\n\n                    <label>Username</label>\n                    <Form.Input\n                    name='username'\n                    placeholder='Username'\n                    value={this.state.username}\n                    onChange={this.handleChange}\n                    /><br/>\n\n                    <label>Password</label>\n                    <Form.Input\n                    type='password'\n                    name='password'\n                    placeholder='Password'\n                    value={this.state.password}\n                    onChange={this.handleChange}\n                    /><br/>\n                    <br/>\n\n                    <input type='submit'/>\n            </Form>)\n    } else {\n      return <Message success>User Successfully created</Message>\n    }\n  }\n\n  render() {\n    return (\n        <Grid stackable container columns={1} >\n            <Grid.Column>\n                {this.renderForm()}\n            </Grid.Column>\n      </Grid>\n\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  createUser: user => dispatch(createUser(user))\n})\n\nexport default connect(null, mapDispatchToProps)(Signup);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport { Form, Grid, Message } from 'semantic-ui-react';\nimport {loginUser} from '../../actions/peopleActions';\n\nclass Login extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    error: false\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n    this.props.loginUser(this.state).then((auth) => {\n      if(auth.error) {\n        console.log(auth.error)\n        this.setState({error: true})\n      } else {\n        this.props.handleLogin(auth)\n        this.props.history.push('/profile')\n      }\n    })\n  }\n\n  render() {\n    return (\n        <Grid stackable container columns={1} >\n\n            <Grid.Column>\n                <Form onSubmit={this.handleSubmit} error >\n                    <h1>Login into your account</h1>\n\n                    <label>Username</label>\n                    <Form.Input\n                    name='username'\n                    placeholder='Username'\n                    value={this.state.username}\n                    onChange={this.handleChange}\n                    />\n                    <br/>\n\n                    <label>Password</label>\n                    <Form.Input\n                    type='password'\n                    name='password'\n                    placeholder='Password'\n                    value={this.state.password}\n                    onChange={this.handleChange}\n                    /><br/>\n                    {this.state.error ? <Message error content=\"Wrong username or password\"/> : null}\n\n                    <br/>\n\n                    <input type='submit'/>\n            </Form>\n        </Grid.Column>\n      </Grid>\n\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  loginUser: user => dispatch(loginUser(user))\n})\n\nexport default connect(null, mapDispatchToProps)(Login);","import React, {Component} from 'react';\nimport { Card, Grid, Button } from 'semantic-ui-react'\n\n// import Task from '../tasks/Task';\nimport { Link } from 'react-router-dom';\n\n\n\nimport TasksModal from '../tasks/TasksModal';\n\n\n\nexport default class Profile extends Component{\n\n    state = {\n        showTasksModal: false,\n\n    }\n\n    renderTasks = () => {\n        const myTasks= this.props.tasks.filter(task => task.person_id === this.props.currentUser.id) // filter out the tasks that don't belong to the person\n        // console.log(myTasks)\n        let project;\n        const list = myTasks.map((task) => {\n                        project = this.props.projects.find(project => project.id === task.project_id )\n                        // console.log(project.title)\n                        // return <li key={task.id}> <Link to={`project-${project.id}`}>{project.title} Project</Link>: {task.description}  {task.completed ? <p>(Completed)</p> : <p>(InProgress)</p>}   </li>\n                        return <li key={task.id}> <Link onClick={this.handleShowTasksModal}>{project.title} Project</Link>: {task.description}  {task.completed ? <p>(Completed)</p> : <p>(InProgress)</p>}   </li>\n                    })\n        return <ul>{list}</ul>\n    }\n\n    handleShowTasksModal = () => {\n        this.setState({\n          showTasksModal: true\n        })\n      }\n  \n    handleHideTasksModal = () => {\n        this.setState({\n          showTasksModal: false\n        })\n      }\n    handleDeletePerson = (e) => {\n        // console.log(e.target.id)\n        this.props.deletePerson(e.target.id)\n        localStorage.removeItem(\"token\");\n        this.props.history.push('/signup')\n    }\n\n    renderProfile = () => {\n        if(this.props.currentUser.username){\n            const person = this.props.people.find(person => person.username === this.props.currentUser.username)\n            const myTasks= this.props.tasks.filter(task => task.person_id === this.props.currentUser.id) // filter out the tasks that don't belong to the person\n            let project;\n            myTasks.map((task) => { return project = this.props.projects.find(project => project.id === task.project_id )})\n            // console.log(project)\n            return (\n                <div>\n\n                {this.state.showTasksModal ? <TasksModal handleHideTasksModal={this.handleHideTasksModal} project={project} tasks={this.props.tasks} people={this.props.people} editProject={this.props.editProject} addTask={this.props.addTask} deleteTask={this.props.deleteTask} editTask={this.props.editTask}/> : null}\n                    <Grid stackable container columns={2} >\n\n                        <Grid.Column>\n                            {/* {console.log(person)} */}\n                            <Card\n                            image={person.image}\n                            header={person.username}\n                            // meta='Software Engineer'\n                            />\n                            <Button id={person.id} onClick={e => this.handleDeletePerson(e)}>Delete my Account</Button>\n                        </Grid.Column>\n                        <Grid.Column>\n\n                            <Card\n                            header={\"Tasks\"}\n                            // meta='Software Engineer'\n                            description={this.renderTasks}\n                            />\n                        </Grid.Column>\n\n                    </Grid>\n    \n                </div>\n                \n            )\n        }\n    }\n\n    render(){    \n        return(\n            <>\n            {/* {console.log(this.props.currentUser)} */}\n           {this.renderProfile()}\n           </>\n        )\n    }\n}","import React, { Component } from 'react';\nimport {\n  HashRouter as Router,\n  Route\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport { connect } from 'react-redux';\n\n\nimport NavBar from './components/NavBar';\nimport SideBar from './components/Sidebar';\n\nimport Projects from './containers/Projects';\n// import Profile from './components/Profile';\nimport Tasks from './containers/Tasks';\nimport People from './containers/People';\n\nimport {fetchProjects, editProject} from './actions/projectActions'\nimport {fetchPeople, loginUser, deletePerson} from './actions/peopleActions'\nimport {fetchTasks, addTask, deleteTask, editTask} from './actions/tasksActions'\n\nimport Signup from './components/people/Signup';\nimport Login from './components/people/Login';\nimport Profile from './components/people/Profile';\n\n\n\n\n\n\nclass App extends Component{\n\n  state = { auth: { currentUser: {} }, showTasksModal: false };\n\n  componentDidMount(){\n    this.props.fetchProjects()\n    this.props.fetchPeople()\n    this.props.fetchTasks()\n\n    const token = localStorage.getItem(\"token\");\n\n    if (token) {\n      this.props.loginUser().then((user) => {\n        const currentUser = { currentUser: user };\n\n        this.setState({ auth: currentUser });\n      });\n    }\n  }\n\n  handleLogin = (user) => {\n    const currentUser = { currentUser: user };\n    // localStorage.setItem(\"token\", user.token);\n\n    this.setState({ auth: currentUser });\n  };\n\n  handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    this.setState({ auth: { currentUser: {} } });\n  };\n\n\n  handleHideTasksModal = () => {\n    this.setState({ showTasksModal: false})\n  }\n  \n  render(){\n    return (\n      <>\n      {/* {console.log(this.state)} */}\n        <Router >\n          <div className=\"flexbox\">\n              <SideBar/>\n              <div className=\"main\">\n              <NavBar currentUser={this.state.auth.currentUser} handleLogout={this.handleLogout}/> \n              {/* send the current user to navbar to show or hide navbar buttons */}\n                <div className=\"ui container\">\n\n                    {/* <Switch> */}\n                      <Route exact path=\"/\" render={(routerProps) => {\n                        return (\n                          localStorage.token ?  <Profile {...routerProps} people={this.props.people} tasks={this.props.tasks} projects={this.props.projects} deletePerson={this.props.deletePerson}currentUser={this.state.auth.currentUser}editProject={this.props.editProject} addTask={this.props.addTask} deleteTask={this.props.deleteTask} editTask={this.props.editTask}/> : <Login {...routerProps} handleLogin={this.handleLogin} />\n                        );\n                      }}/>\n\n                      <Route exact path=\"/projects\" \n                       render={routerProps => {\n                         return (\n                       <Projects {...routerProps}/>)\n                      }}/> \n                      \n                      {/* I sent router props to have acces to match */}\n\n                      <Route exact path={`/${\"project\"}-:id`} \n                       render={routerProps => {\n                        return (\n                       <Tasks {...routerProps} />)\n                       }} >\n                        {/* move this to the projects view and don't create a new route */}\n                      </Route>\n\n                      <Route exact path={`/people`}>\n                        <People />\n                      </Route>\n\n                      <Route exact path={`/signup`}\n                       render={(routerProps) => {\n                        return (\n                          <Signup {...routerProps} />\n                        );\n                      }}/>\n\n                      <Route exact path={`/login`} \n                       render={(routerProps) => {\n                        return (\n                          <Login {...routerProps} handleLogin={this.handleLogin} />\n                        );\n                      }}/>\n\n                      <Route exact path={`/profile`} \n                       render={(routerProps) => {\n                        return (\n                          <Profile {...routerProps} \n                          people={this.props.people}\n                          tasks={this.props.tasks}\n                          projects={this.props.projects}\n                          deletePerson={this.props.deletePerson}\n                          currentUser={this.state.auth.currentUser}\n                          editProject={this.props.editProject} \n                          addTask={this.props.addTask} \n                          deleteTask={this.props.deleteTask} \n                          editTask={this.props.editTask}\n                          />\n                        );\n                      }}/>\n\n\n                      \n                    {/* </Switch>  */}\n                </div>                                            \n              </div>\n          </div> \n        </Router>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return{\n    projects: state.projects,\n    people: state.people,\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      fetchProjects: () => dispatch(fetchProjects()),\n      fetchPeople: () => dispatch(fetchPeople()),\n      fetchTasks: () => dispatch(fetchTasks()),\n      loginUser: () => dispatch(loginUser()),\n      deletePerson: (id) => dispatch(deletePerson(id)),\n      editProject: project => dispatch(editProject(project)),\n      addTask: project_id => dispatch(addTask(project_id)),\n      deleteTask: id => dispatch(deleteTask(id)),\n      editTask: task => dispatch(editTask(task))\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore,  applyMiddleware} from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers/index';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n// import { composeWithDevTools } from 'redux-devtools-extension';\n\n// const composeEnhancers = composeWithDevTools();\n\nexport const store = createStore(reducer, \n  applyMiddleware(thunk)\n  );\n// console.log(store.getState())\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n    {/* {console.log(store)} */}\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}