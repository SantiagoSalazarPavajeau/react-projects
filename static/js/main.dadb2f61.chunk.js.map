{"version":3,"sources":["reducers/projects.js","reducers/index.js","reducers/tasks.js","reducers/people.js","components/SideBar.js","components/NavBar.js","actions/projectActions.js","components/projects/ProjectInput.js","components/projects/ProjectCard.js","containers/Projects.js","components/Profile.js","components/tasks/Task.js","components/tasks/TasksModal.js","actions/tasksActions.js","containers/Tasks.js","components/people/Person.js","containers/People.js","App.js","actions/peopleActions.js","serviceWorker.js","index.js"],"names":["cuid","combineReducers","projects","state","action","type","project","title","newProject","started","description","id","filter","projectIndex","findIndex","slice","data","map","attributes","concat","tasks","console","log","task","newTask","taskIndex","people","person","name","image","avatar","src","SideBar","className","to","aria-hidden","Component","NavBar","URL","ProjectInput","showModal","handleOnChange","event","setState","target","value","handleOnSubmit","preventDefault","props","saveProject","openModal","closeModal","renderForm","Button","onClick","Modal","dimmer","open","Header","Content","Image","wrapped","size","alt","Description","Form","Input","onChange","placeholder","TextArea","this","ProjectCard","edit","percent","handleDeleteClick","handleCancel","handleConfirm","deleteProject","setPercent","basic","icon","Confirm","onCancel","onConfirm","Projects","showFormModal","renderProjects","key","editProject","renderModal","connect","taks","dispatch","configObj","method","headers","body","JSON","stringify","fetch","then","response","json","Profile","as","textAlign","Icon","circular","Task","person_id","completed","project_id","makeCompleted","makeInProgress","handleSave","editTask","handleDelete","deleteTask","assignTo","e","ownerIndex","innerText","renderInProgress","owner","find","labelPosition","rows","cols","Dropdown","button","floating","labeled","options","renderCompleted","Label","color","Detail","TasksModal","loading","projectTasks","numberCompleted","numberInProgress","i","length","startEdit","cancelEdit","saveEdit","renderEdit","onSubmit","renderDescription","Grid","columns","Row","Column","secondary","content","history","goBack","renderTasks","handleAddTask","addTask","scrolling","width","status","Divider","horizontal","withRouter","Tasks","toString","match","params","parseInt","editedTask","editedProject","Person","myTasks","Card","header","meta","People","renderPeople","addPerson","App","fetchProjects","fetchPeople","fetchTasks","exact","path","render","routerProps","catch","error","message","Boolean","window","location","hostname","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dadb2f61.chunk.js","sourcesContent":["import cuid from 'cuid';\nexport const cuidFn = cuid;\n\n\nexport default function projects(\n    state = []\n    ,\n    action){\n        switch(action.type){\n            case 'ADD_PROJECT':\n                const project = {\n                    title: action.newProject.title,\n                    started: '',\n                    description: action.newProject.description,\n                    id: action.newProject.id\n                }\n                return [...state, project]\n            case 'DELETE_PROJECT':\n                return [...state.filter(project => project.id !== action.id)]\n            case 'EDIT_PROJECT':\n                let projectIndex = state.findIndex(project => project.id === action.project.id) //state is empty if load projects does not include state\n                return [...state.slice(0, projectIndex), action.project, ...state.slice(projectIndex + 1)]\n            case 'LOAD_PROJECTS':\n                // console.log(action.projects.data)\n                let projects = action.projects.data.map(project => project.attributes)\n                // console.log(...state, projects)\n                return [...state.concat(projects)] // this sets state to include the projects. if we only return the projects object, state will be empty on other actions\n            case 'LOADING_PROJECTS':\n                return [...state]\n            default:\n                return state\n        }\n\n}\n\n\n\n\n\n","import { combineReducers } from 'redux'\nimport projects from './projects'\nimport tasks from './tasks'\nimport people from './people'\n\nexport default combineReducers({\n    projects,\n    tasks,\n    people\n})","\n\nexport default function tasks(state = [], action){\n    switch(action.type){\n        case 'ADD_TASK':\n                console.log(action.task)\n                console.log(state)\n                return[...state.concat(action.newTask)]\n            case 'DELETE_TASK':\n                return [...state.filter(task => task.id !== action.id)]\n            case 'EDIT_TASK':\n                let taskIndex = state.findIndex(task => task.id === action.task.id)\n                console.log(action.task)\n                return[...state.slice(0, taskIndex), action.task, ...state.slice(taskIndex + 1)]\n            case 'LOAD_TASKS':\n                const tasks = action.tasks.data.map(task => task.attributes)\n                return [...state.concat(tasks)]\n            default:\n                return state;\n    }\n}\n\n","export default function people(state = [], action){\n    switch(action.type){\n        case 'ADD_PEOPLE':\n                const person = {\n                        name: 'Santi',\n                        id: '1',\n                        image: { avatar: true, src: 'https://api.adorable.io/avatars/70' },\n                }\n                return [...state, person]\n        case 'LOAD_PEOPLE':\n          const people = action.people.data.map(person => person.attributes)\n          return [...state.concat(people)]\n        default:\n            return state\n    }\n}","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport \"../App.css\";\n\n\n\nexport default class SideBar extends Component{\n    render(){\n        return(\n        <div className=\"sidebar\">\n            <div className=\"ui left vertical inverted icon visible sidebar menu\">\n                <Link to=\"/projects\" className=\"item\">\n                        <i aria-hidden=\"true\" className=\"home icon\"></i>\n                        Home\n                </Link>\n                <Link to=\"/projects\" className=\"item\" >\n                        <i aria-hidden=\"true\" className=\"sitemap icon\"></i>\n                        Projects\n                </Link>\n                <Link to=\"/people\" className=\"item\" >\n                        <i aria-hidden=\"true\" className=\"users icon\"></i>\n                        People\n                </Link>\n            </div>\n        </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class NavBar extends Component{\n    render(){\n        return(\n            <div className=\"ui stackable menu\">\n                <div className=\"header item\">\n                    Projects Dashboard\n                </div>\n                    {/* <Link to=\"/login\" className=\"ui item\">Login</Link>\n                    <Link to=\"/signup\" className=\"ui item\" >Signup</Link>\n                    <Link to=\"/profile\" className=\"ui item\" >Profile</Link>\n                    <Link to=\"/logout\" className=\"ui item right\"> Logout </Link> */}\n\n            </div>\n            \n        )\n    }\n}","const URL ='https://secure-shelf-48338.herokuapp.com/'\n\nexport function fetchProjects(){\n    return (dispatch) => {\n        dispatch({type: 'LOADING_PROJECTS'})\n            fetch(`${URL}/projects`)\n                .then(response => {return response.json()})\n                .then(projects => {\n                    // console.log(projects)\n                    dispatch({type: 'LOAD_PROJECTS', projects}) // Have to access the data structure from the rails API correctly\n                })\n                .catch(error => console.log(error.message))\n    }\n}\n\nexport function saveProject(project){\n    const configObj = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n            title: project.title,\n            description: project.description\n        })\n      };\n    return (dispatch) => {\n        fetch(`${URL}/projects`, configObj)\n            .then(response => {return response.json()})\n            .then(project => {\n                // console.log(project)\n                const newProject = project.data.attributes // async response from server adds project\n                dispatch({type: 'ADD_PROJECT', newProject}) // a project can have data that references tasks and tasks have data that references people\n            })\n    }\n}\n\nexport function deleteProject(id){\n    const configObj = {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        }\n      };\n    return (dispatch) => {\n        fetch(`${URL}/projects/${id}`, configObj)\n            .then(response => {return response.json()})\n            .then(() => {\n                dispatch({type: 'DELETE_PROJECT', id}) // a project can have data that references tasks and tasks have data that references people\n            })\n    }\n}\n\nexport function editProject(project){\n    const configObj = {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n            title: project.title,\n            description: project.description\n        })\n      };\n    return (dispatch) => {\n        fetch(`${URL}/projects/${project.id}`, configObj)\n            .then(response => {return response.json()})\n            .then(editedProject => {\n                console.log(editedProject)\n                let project = editedProject.data.attributes\n                dispatch({type: 'EDIT_PROJECT', project}) // a project can have data that references tasks and tasks have data that references people\n            })\n    }\n}","import React, {Component} from 'react';\n// import ProjectCard from './ProjectCard';\nimport { Button, Header, Image, Modal, Form } from 'semantic-ui-react'\n\n\n\nexport default class ProjectInput extends Component{\n    state = {\n        title: '',\n        description: '',\n        showModal: false\n    }\n\n    handleOnChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    handleOnSubmit = (event) => {\n        event.preventDefault()\n        this.props.saveProject(this.state)\n        this.setState({\n            title: '',\n            description: '',\n            showModal: false\n        })\n    }\n\n    openModal = () => {\n        this.setState({\n            showModal: true\n        })\n    }\n\n    closeModal = () => {\n        this.setState({\n            showModal: false\n        })\n    }\n\n\n\n    renderForm = () => {\n        return (\n            <>\n            <Button onClick={this.openModal}> <i className=\"add icon center\"></i></Button>\n            <Modal dimmer={\"inverted\"} open={this.state.showModal} >\n                <Modal.Header>Add a project</Modal.Header>\n                    <Modal.Content image>\n                    <Image wrapped size='medium' alt=\"Workbench and tools\" src='https://images.unsplash.com/photo-1416339158484-9637228cc908?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1934&q=80' />\n                    <Modal.Description>\n                        <Form>\n                        <Header>Title:</Header>\n                                <Form.Input type=\"text\" onChange={event => this.handleOnChange(event)} value={this.state.title} name=\"title\" placeholder={this.state.title}/>\n                        <Header>Description:</Header>\n                                <Form.TextArea type=\"textarea\" onChange={event => this.handleOnChange(event)} value={this.state.description} name=\"description\" placeholder={this.state.description}/>\n                                <Form.Button onClick={(event) => this.handleOnSubmit(event)} type=\"submit\" >Submit</Form.Button>\n                                <Form.Button onClick={this.closeModal} type=\"submit\" >Cancel</Form.Button>\n                        </Form>\n                    </Modal.Description>\n                </Modal.Content>\n            </Modal>\n\n\n            </>\n        )\n    }\n    render(){\n        return(\n            <>\n            {/* {this.state.showForm ? this.renderForm() : <Button onClick={this.showForm}> Add project </Button>}   */}\n            {this.renderForm()}\n            </>\n        )\n    }\n}","import React, {Component} from 'react';\nimport { Button, Confirm } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom';\n\n\n\n// modal is to display tasks\n\nexport default class ProjectCard extends Component{\n    state = {\n      open: false,\n      edit: false,\n      percent: 50\n    }\n\n    handleDeleteClick = (event) => {\n      this.setState({\n        open: true\n      })\n    }\n\n    handleCancel = () => {\n      this.setState({\n        open: false\n      })\n    }\n\n    handleConfirm = () => {\n      this.props.deleteProject(this.props.id)\n      this.setState({\n        open: false\n      })\n    }\n\n    setPercent = () =>{\n      console.log(this.props)\n      // const projectTasks = this.props.tasks.filter(task => task.project_id === this.state.id)\n      let percent = 0\n      this.setState({\n        percent: percent\n      })\n    }\n\n\n\n    render(){\n        return(\n            <div className=\"eight wide column\" >\n\n            <div className=\"ui card\">\n              <div className=\"image\">\n              </div>\n              <div className=\"content\">\n                  {/* <input value={this.props.title}/> */}\n                      <Link className=\"header\" to={`/projects/${this.props.id}`}>{this.props.title}</Link> \n                      {/* this link nests deeper with every click */}\n                  <div className=\"meta\">\n                    <span className=\"date\">{this.props.started}</span>\n                  </div>\n                  <div className=\"description\">\n                    {this.props.description}\n                  </div>\n                  <div className=\"ui right aligned grid\">\n              \n                  <div className=\"sixteen wide column\">\n                                   \n                  </div>\n                  </div>\n              </div>\n              <div className=\"extra content\">\n                <div className=\"left floated right aligned six wide column\">\n                        \n                        <Link className=\"header\" to={`/projects/${this.props.id}`}>\n                          <Button basic icon='pencil'/>\n                        </Link> \n                        <Button basic icon='trash' onClick={event => this.handleDeleteClick(event)}>\n                        {/* <i aria-hidden=\"true\" className=\"trash alternate icon right\"></i> */}\n                      </Button>\n                      <Confirm\n                        open={this.state.open}\n                        onCancel={this.handleCancel}\n                        onConfirm={this.handleConfirm}\n                      />        \n                  </div>\n                \n              </div>\n            </div>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport '../App.css'\nimport {saveProject, deleteProject} from '../actions/projectActions' //async actions imported from the actions file\n\nimport ProjectInput from '../components/projects/ProjectInput';\nimport ProjectCard from '../components/projects/ProjectCard';\n\n\n\n\n// content changes here with router\n// need Many of these\n// will become a container component\n\nclass Projects extends Component{\n\n    state = {\n        showFormModal: false\n    }\n\n    renderProjects = () => {\n        // console.log(this.props.match.url)\n        return this.props.projects.map( project => <ProjectCard key={project.id} tasks={this.props.tasks} title={project.title} started={project.started} description={project.description} id={project.id} editProject={this.props.editProject} deleteProject={this.props.deleteProject}/> )\n     \n    }\n\n    renderModal = () => {\n        this.setState({\n            showFormModal: true\n        })\n    }\n\n    render(){\n        return(\n            <>\n                    <div className=\"ui grid container\">\n                        <div className=\"eight wide column\" >\n                            <ProjectInput saveProject={this.props.saveProject}/>\n                        </div>\n                    </div>\n\n                    <br></br>\n                    <br></br>\n\n                    <div className=\"ui grid container\">\n                        {/* <ProjectsList projects={this.props.projects} editProject={this.props.editProject} deleteProject={this.props.deleteProject}/> */}\n                        {this.renderProjects()}\n\n                    </div>\n                    <br></br>\n                    <br></br>\n\n\n\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        projects: state.projects,\n        taks: state.tasks\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        saveProject: (project) => dispatch(saveProject(project)), // this changed from the local redux store to the redux thunk backend connection\n        deleteProject: (id) => dispatch(deleteProject(id))\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Projects);","import React, {Component} from 'react';\nimport { Header, Icon} from 'semantic-ui-react'\n\n\nexport default class Profile extends Component{\n    render(){\n        return(\n            <>\n                <Header as='h2' icon textAlign='center'>\n                    <i aria-hidden=\"true\" className=\"users icon left\"></i>\n                    <Header.Content>Projects</Header.Content>\n                </Header>\n                <Header as='h2' icon textAlign='center'>\n                    <Icon name='settings' circular />\n                    <Header.Content>Tasks</Header.Content>\n                </Header>\n                <Header as='h2' icon textAlign='center'>\n                    <Icon name='plug' circular />\n                    <Header.Content>Processes</Header.Content>\n                </Header>\n            </>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { Input, Dropdown, Label, TextArea, Button, Form } from 'semantic-ui-react';\n\n\nclass Task extends Component{\n\n    state = {\n        description: this.props.description,\n        id: this.props.id,\n        person_id: this.props.person_id,\n        completed: this.props.completed,\n        project_id: this.props.project_id\n    }\n\n    makeCompleted = () => {\n        this.setState({\n            completed: true\n        })\n    }\n\n    makeInProgress = () => {\n        this.setState({\n            completed: false\n        })\n    }\n\n    handleSave = () => {\n        console.log(this.state.person_id)\n        this.props.editTask(this.state)\n    }\n\n    handleDelete = () => {\n        this.props.deleteTask(this.props.id)\n    }\n\n    assignTo = (e) => {\n        const ownerIndex = this.props.people.findIndex(person => person.key === e.target.innerText)\n        this.setState({\n            person_id: this.props.people[ownerIndex].id // use onchange for dropdowns/select and parentNode.id instead of value\n        })\n    }\n    \n    renderInProgress = () => {\n        let owner = this.props.people.find(person => person.id === this.state.person_id) // person_id is a propery of the task and we can find the owner in the people state\n        return (\n            \n            <>\n            <br></br>\n\n            {/* {console.log(owner)}\n            {console.log(this.props.people)}\n            {console.log(this.state.person_id)} */}\n                <Input  size=\"small\" labelPosition='right' type='text' value={this.state.description} placeholder={this.state.description}>\n\n                <TextArea onChange={event => this.setState({description: event.target.value})} value={this.state.description} rows=\"4\" cols=\"70\"/>\n                <Button onClick={this.handleSave} icon=\"save\"></Button>\n                <Button onClick={this.makeCompleted} icon=\"check circle\"></Button>\n                <Button onClick={this.handleDelete} icon=\"trash\"></Button>\n\n                </Input>\n            <br></br>\n\n                Assigned to: <Dropdown button className='icon' placeholder={owner ? owner.key : 'Yet to be assigned'} onChange={e => this.assignTo(e)} floating labeled icon='users' options={this.props.people} />\n            <br></br>\n\n            <br></br>\n            <br></br>\n            <br></br>\n            </>\n\n        )\n    }\n    \n    renderCompleted = () => {\n        let owner = this.props.people.find(person => person.id === this.state.person_id)\n        return (\n            <>\n            <br></br>\n            <Label color='green' image>\n            <img alt=\"Profile Pic\" src='https://api.adorable.io/avatars/77/stevie@adorable.io.png' />\n                completed by {owner ? owner.key : 'Yet to be assigned'}\n            <Label.Detail>{this.props.description}</Label.Detail>\n\n            </Label>\n            <Button onClick={this.handleSave} icon=\"save\"></Button>\n            <Button onClick={this.makeInProgress} icon=\"redo\"></Button>   \n            <Button onClick={this.handleDelete} icon=\"trash\"></Button>\n\n            <br></br>\n            </>\n        )     \n     }\n    \n    render(){\n        return (\n            <>\n            <Form> \n            {this.state.completed ? this.renderCompleted() : this.renderInProgress()}\n            </Form>\n            {/* {console.log(this.state)} */}\n            </>\n        )\n    }\n}\n\nexport default Task\n\n\n","import React, {Component} from 'react';\nimport { Header, Image, Modal, Form, Button, Divider, Grid } from 'semantic-ui-react'\nimport {withRouter} from 'react-router-dom';\nimport Task from './Task'\n\nimport { Progress } from 'react-sweet-progress';\nimport \"react-sweet-progress/lib/style.css\";\n\n\nclass TasksModal extends Component{\n    state = {\n        title: this.props.project.title,\n        started: this.props.project.started,\n        description: this.props.project.description,\n        id: this.props.project.id,\n        edit: false,\n        loading: false\n    }\n    \n    setPercent = () => {\n        const projectTasks = this.props.tasks.filter(task => task.project_id === this.state.id)\n        let percent =  0\n        let numberCompleted = 0\n        let numberInProgress = 0\n        for(let i=0; i<projectTasks.length;i++){\n            if(projectTasks[i].completed === true){\n                numberCompleted++\n                console.log(numberCompleted)\n            }else{\n                numberInProgress++\n                console.log(numberInProgress)\n            }\n            percent = numberCompleted / (numberInProgress + numberCompleted)\n        }\n        console.log(percent)\n        this.setState({\n            percent: percent * 100\n        })\n    }\n\n    componentDidMount(){\n        this.setPercent()\n    }\n    \n    startEdit = () => {\n        this.setState({\n            edit: true\n        })\n    }\n\n    cancelEdit = () => {\n        this.setState({\n            edit: false\n        })\n    }\n\n    saveEdit = (event) => {\n        event.preventDefault()\n        this.props.editProject({\n            title: this.state.title,\n            started: this.props.project.started,\n            id: this.props.project.id,\n            description: this.state.description\n        })\n        this.setState({\n            edit: false\n        })\n        // console.log(this.props.projects)\n    }\n\n    handleOnChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    renderEdit = (project) => {\n        return (\n            <Modal.Description>\n                <Form onSubmit={(event) => this.saveEdit(event)}>\n                    <Form.Input type=\"text\" onChange={event => this.handleOnChange(event)} value={this.state.title} name=\"title\" />\n                    <Form.TextArea type=\"textarea\" onChange={event => this.handleOnChange(event)} value={this.state.description} name=\"description\" />\n                    <Button icon=\"save\" type=\"submit\" ></Button>\n                    <Button icon=\"close\" onClick={this.cancelEdit}></Button>\n                </Form>\n            </Modal.Description>\n        )\n    }\n    renderDescription = (project) => {\n        return (\n            <>\n                <Grid columns={3}>\n                <Grid.Row>\n                    <Grid.Column>\n                    <Button basic secondary content=\"Edit Project\" labelPosition='right' icon=\"pencil\" onClick={e => this.startEdit(e)} ></Button>                               \n                    </Grid.Column>\n                    <Grid.Column>\n                    </Grid.Column>\n                    <Grid.Column>\n                    <Button basic content=\"Exit Project Page\"  onClick={this.props.history.goBack} secondary ></Button>\n                    </Grid.Column>\n                    </Grid.Row>\n                </Grid> \n                <Header>{project.title}</Header>\n                <p>{project.description}</p>\n\n                      \n            </>          \n        )\n    }\n\n    renderTasks = () => {// filter tasks for this project only\n        // console.log(this.props.tasks)\n        const projectTasks = this.props.tasks.filter(task => task.project_id === this.state.id)\n        return projectTasks.map(task => <Task key={task.id} people={this.props.people} person_id={task.person_id} deleteTask={this.props.deleteTask} project_id={this.state.id} editTask={this.props.editTask} id={task.id} description={task.description} completed={task.completed}/>)\n    }\n\n    handleAddTask = () => {\n        this.props.addTask(this.state.id)\n        console.log(this.state.id)\n    }\n\n    renderModal = () => {\n        // console.log(this.props)\n        if(!this.props.loading){\n            const project = this.props.project\n            return(\n                <>\n                    <div className=\"ui grid container\">\n                        <div className=\"eight wide column\" >\n                            <Modal size={\"large\"}dimmer={\"inverted\"} open={true} >\n                                <Modal.Header></Modal.Header>\n                                    <Modal.Content image scrolling>\n                                    <Image size='medium' alt=\"Workbench and tools\" src='https://images.unsplash.com/photo-1416339158484-9637228cc908?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1934&q=80' wrapped/>\n                                    <Modal.Description>\n                                    {this.state.edit ?  this.renderEdit(project) : this.renderDescription(project)}\n                                    {/* {this.setPercent()} */}\n                                    <Progress type=\"circle\" width={30} percent={this.state.percent} status=\"success\" />\n                                    <Divider horizontal>Tasks</Divider>\n                                    <Button basic secondary onClick={this.handleAddTask}>Add Task</Button>\n                                    <br></br>\n                                    {this.renderTasks()}\n                                    {/* {console.log(this.props.tasks.filter(task => task.projectId === this.state.id))} */}\n                                    {/* {console.log(project)} */}\n\n                                    </Modal.Description>\n                                </Modal.Content>\n\n\n                            </Modal>\n                        </div>\n                    </div>\n                \n            </>\n            )\n        }else{\n            return (\n                <>\n                    <div className=\"ui grid container\">\n                        <div className=\"eight wide column\" >\n                            <Modal size={\"large\"}dimmer={\"inverted\"} open={true} >\n                               <p>Loading</p> \n\n\n                            </Modal>\n                        </div>\n                    </div>\n                </>\n                \n            )\n        }\n    }\n\n    render(){\n        return( \n            <>\n            {this.renderModal()}\n            </>\n        )\n    }\n    \n  }\n\nexport default withRouter(TasksModal)","const URL ='https://secure-shelf-48338.herokuapp.com/'\n\nexport function fetchTasks(){\n    return (dispatch) => {\n            fetch(`${URL}/tasks`)\n                .then(response => {return response.json()})\n                .then(tasks => {\n                    // console.log(tasks)\n                    dispatch({type: 'LOAD_TASKS', tasks}) // Have to access the data structure from the rails API correctly\n                })\n                .catch(error => console.log(error.message))\n    }\n}\n\nexport function addTask(project_id){\n    const configObj = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n            description: \"New task...\",\n            project_id: project_id,\n            person_id: 1,  // person_id needed for ActiveRecord to commit task to database\n            completed: false\n        })\n      };\n    return (dispatch) => {\n        fetch(`${URL}/tasks`, configObj)\n            .then(response => {return response.json()})\n            .then(task => {\n                // console.log(project)\n                const newTask = task.data.attributes \n                console.log(task)\n                dispatch({type: 'ADD_TASK', newTask}) \n            })\n    }\n}\n\nexport function deleteTask(id){\n    const configObj = {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        }\n      };\n    return (dispatch) => {\n        fetch(`${URL}/tasks/${id}`, configObj)\n            .then(response => {return response.json()})\n            .then(() => {\n                dispatch({type: 'DELETE_TASK', id})\n            })\n    }\n}\n\nexport function editTask(task){\n    const configObj = {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n            description: task.description,\n            person_id: parseInt(task.person_id),\n            project_id: task.project_id,\n            completed: task.completed\n        })\n      };\n    return (dispatch) => {\n        fetch(`${URL}/tasks/${task.id}`, configObj)\n            .then(response => {return response.json()})\n            .then(editedTask => {\n                console.log(editedTask)\n                let task = editedTask.data.attributes\n                dispatch({type: 'EDIT_TASK', task}) // a task can have data that references tasks and tasks have data that references people\n            })\n    }\n}","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport '../App.css'\n\nimport TasksModal from '../components/tasks/TasksModal';\nimport { editProject } from '../actions/projectActions';\nimport { addTask, deleteTask, editTask } from '../actions/tasksActions';\n\n\n\n// nested route for tasks needs to be here\n\nclass Tasks extends Component{\n\n    render(){\n        const project = this.props.projects.find(project => project.id.toString() === this.props.match.params.id)\n        return ( // the match params id is a string not an integer\n            <>\n            <TasksModal project={project} tasks={this.props.tasks} people={this.props.people}  match={this.props.match} editProject={this.props.editProject} addTask={this.props.addTask} deleteTask={this.props.deleteTask} editTask={this.props.editTask}/>\n            {/* {console.log(this.props)} */}\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n        tasks: state.tasks,\n        projects: state.projects,\n        people: state.people\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        addTask: project_id => dispatch(addTask(project_id)),\n        deleteTask: id => dispatch(deleteTask(id)),\n        editTask: task => dispatch(editTask(task)),\n        editProject: project => dispatch(editProject(project)),\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps) (Tasks)","import React, {Component} from 'react';\nimport { Card } from 'semantic-ui-react'\n\n\nexport default class Person extends Component{\n\n    render(){\n        const myTasks= this.props.tasks.filter(task => task.person_id === this.props.id) // filter out the tasks that don't belong to the person\n        return(\n            <div className=\"four wide column\" >\n                {/* {console.log(this.props.tasks)}  */}\n                {/* See if we are having access to the store and the tasks */}\n                {/* {console.log(myTasks)} */}\n                 <Card\n                    image={this.props.image.src}\n                    header={this.props.name}\n                    meta='Software Engineer'\n                    description={<ul>{myTasks.map(task => <li key={task.id}> {task.description} {task.completed ? <p>(Completed)</p> : <p>(InProgress)</p>}</li>)}</ul>}\n                />\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\n\nimport Person from '../components/people/Person'\n\nclass People extends Component{\n\n    renderPeople = () => {\n    return this.props.people.map(person => <Person key={person.id} id={person.id} name={person.key} image={person.image} tasks={this.props.tasks}></Person>)\n    }\n\n    render(){\n        return (\n            <div className=\"ui grid container\">\n                {/* {console.log(this.props.people[0])} */}\n                {this.renderPeople()}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        people: state.people,\n        tasks: state.tasks\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        addPerson: person => dispatch({type: 'ADD_PERSON', person})\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(People);","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport { connect } from 'react-redux';\n\n\nimport SideBar from './components/SideBar';\nimport NavBar from './components/NavBar';\nimport Projects from './containers/Projects';\nimport Profile from './components/Profile';\nimport Tasks from './containers/Tasks';\nimport People from './containers/People';\n\nimport {fetchProjects} from './actions/projectActions'\nimport {fetchPeople} from './actions/peopleActions'\nimport {fetchTasks} from './actions/tasksActions'\n\n\n\n\n\nclass App extends Component{\n\n  componentDidMount(){\n    this.props.fetchProjects()\n    this.props.fetchPeople()\n    this.props.fetchTasks()\n  }\n  \n  render(){\n    return (\n      <>\n        <Router>\n          <div className=\"flexbox\">\n              <SideBar/>\n              <div className=\"main\">\n              <NavBar/>\n                <div className=\"ui container\">\n\n                    {/* <Switch> */}\n                      <Route exact path=\"/\" render={()=> <Profile/>}>\n                      </Route>\n                      <Route exact path=\"/login\">\n                        <p>Login</p>\n                      </Route>\n\n                      <Route exact path=\"/projects\" render={routerProps => <Projects {...routerProps}/>}/> \n                      {/* I sent router props to have acces to match */}\n\n                      <Route exact path={`/projects/:id`} render={routerProps => <Tasks {...routerProps} />} >\n                        {/* {console.log(this.props.tasks)} */}\n                      </Route>\n\n                      <Route exact path={`/people`}>\n                        <People />\n                      </Route>\n                      \n                    {/* </Switch>  */}\n                </div>                                            \n              </div>\n          </div> \n        </Router>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return{\n    projects: state.projects,\n    people: state.people,\n    tasks: state.tasks\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      fetchProjects: () => dispatch(fetchProjects()),\n      fetchPeople: () => dispatch(fetchPeople()),\n      fetchTasks: () => dispatch(fetchTasks())\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","const URL ='https://secure-shelf-48338.herokuapp.com/'\n\nexport function fetchPeople(){\n    return (dispatch) => {\n            fetch(`${URL}/people`)\n                .then(response => {return response.json()})\n                .then(people => {\n                    // console.log(projects)\n                    dispatch({type: 'LOAD_PEOPLE', people}) // Have to access the data structure from the rails API correctly\n                })\n                .catch(error => console.log(error.message))\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore,  applyMiddleware} from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers/index';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nexport const store = createStore(reducer,\n  applyMiddleware(thunk)\n  );\n// console.log(store.getState())\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}